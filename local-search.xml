<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2022/12/14/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/12/14/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据课程学习记录</title>
    <link href="/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%8D%E4%B9%A0%E7%AD%94%E6%A1%88%E7%89%88/"/>
    <url>/2021/12/21/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%8D%E4%B9%A0%E7%AD%94%E6%A1%88%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="大数据复习"><a href="#大数据复习" class="headerlink" title="大数据复习"></a>大数据复习</h1><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ol><li><p>跟云计算、物联网、有什么联系</p></li><li><p>大数据技术与其他技术相比有什么优势</p></li></ol><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连</p></li><li><h5 id="M-x2F-S模式"><a href="#M-x2F-S模式" class="headerlink" title="M&#x2F;S模式"></a>M&#x2F;S模式</h5><p>分布式文件系统在物理结构上是由计算机集群中的多个节点构成的，这些节点分为两类，一类叫“主节点”(Master Node)或者也被称为“名称结点”(NameNode)，另一类叫“从节点”（Slave Node）或者也被称为“数据节点”(DataNode)</p></li><li><h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><ol><li><p>文件被切分成固定大小的数据块 </p><p>◦默认数据块大小为128MB(hadoop2.x ）</p><p>◦若文件大小不到128MB ，则单独存成一个block</p></li><li><p>一个文件存储方式 </p><p>◦按大小被切分成若干个block，存储到不同节点上</p><p>◦默认情况下每个block都有三个副本（平等）</p></li></ol></li></ol><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li><h5 id="怎么存储的"><a href="#怎么存储的" class="headerlink" title="怎么存储的?"></a>怎么存储的?</h5><p>通过数据块（Block）形式存储到不同的节点上</p><p>默认情况下每个数据块都有<strong>三个副本</strong>（平等）</p></li><li><h5 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h5><p>元数据：描述数据的数据</p><p>NameNode上存放了HDFS的元数据（一个HDFS集群只有一份元数据）</p><p><em>元数据保存在NameNode的内存中，以便快速查询</em></p></li><li><h5 id="备份机制、读、写机制"><a href="#备份机制、读、写机制" class="headerlink" title="备份机制、读、写机制"></a>备份机制、读、写机制</h5><p>备份机制：数据块有备份的副本</p><p>读：通过元数据查询再从DataNode读</p><p>写：Namenode写入DataNode（检测心跳，活着就写），DataNode再向其他DataNode写副本。</p><p>注：DataNode的存储不用划数据块</p></li></ol><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ol><li>MapReduce自身的设计特点决定了数据源必须是静态的</li></ol><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ol><li><h5 id="实验例子-sogou词频统计"><a href="#实验例子-sogou词频统计" class="headerlink" title="实验例子(sogou词频统计)"></a>实验例子(sogou词频统计)</h5></li><li><h5 id="Map-Reduce方法、机制"><a href="#Map-Reduce方法、机制" class="headerlink" title="Map Reduce方法、机制"></a>Map Reduce方法、机制</h5><p><strong>思想</strong>：Map-reduce的思想就是“分而治之”</p><p><strong>Mapper</strong>： Mapper负责“分”，即把复杂的任务分解为若干个“简单的任务”执行</p><p><strong>步骤</strong>：<strong>INPUT</strong>-Split-Mapper-（Combiner）-（Partitioner）-Shuffle-Reduce-<strong>RESULT</strong></p><p>Spit: MapReduce中最小的计算单元，◦默认与Block一一对应(<em>大拆分</em>)</p><p>Mapper: （<em>小拆分</em>）</p><p>Combiner: 合并相同的key对应的value◦[好处：减少Map输出数据（磁盘IO）◦减少Reduce-Map网络传输数据量(网络IO)]</p><p>Partitioner: 决定了Map Task输出的每条数据交给哪个Reduce Task处理</p><p>Shuffle: Shuffle阶段有排序、分组、合并(内存缓冲区)</p></li></ol><p>###YARN</p><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p><strong>YARN：</strong> Yet Another Resource Negotiator（另一种资源协调者）</p><ol><li><p>集群资源管理系统</p></li><li><p>◦负责集群的统一管理和调度</p></li></ol><p><strong>背景：</strong>多个框架各自为战，数据共享困难</p><p>​随着数据量的暴增，跨集群间的数据移动不仅需要花费更长的时间，而且硬件成本也大大增加，而共享集群模式可让多种框架共享数据和硬件资源，将大大减少数据移动带来的成本</p><p><strong>YARN特点：</strong></p><ol><li>类似分布式操作系统</li><li>Master &#x2F;Slave 架构</li><li>管理CPU和Memory</li><li>运行在YARN上面的MR类似一个个应用</li></ol><p><strong>组件：</strong></p><p><strong>ResourceManager</strong>：整个集群只有一个，负责集群资源的统一管理和调度</p><ol><li>处理客户端请求</li><li>启动&#x2F;监控ApplicationMaster（每个应用对应一个ApplicationMaster[1个MR对应1个]）</li><li>监控NodeManager</li></ol><p><strong>NodeManager</strong>：每个节点一个，负责资源的管理和使用</p><ol><li>单个节点上的资源管理和任务管理</li><li>处理来自ResourceManager的命令</li><li>处理来之ApplicationMaster的命令</li></ol><p><strong>ApplicationMaster</strong>：每个应用程序有一个，负责应用程序的管理和任务调度</p><ol><li>数据切分</li><li>为应用申请资源，进一步分配内部任务</li><li>任务监控和容错</li></ol><p><strong>Container</strong>：对任务运行环境的抽象</p><ol><li>描述一系列信息<ol><li>任务运行资源（节点、内存、CPU）</li><li>任务启动命令</li><li>任务运行环境</li></ol></li><li>比一个应用切分成了很多个部分，比如Map、MySQL等对应不同的Container</li><li>资源隔离</li></ol><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p><strong>Hive：</strong></p><ol><li>底层是MapReduce</li><li>存储再HDFS中</li><li>Hive是数据仓库，不是数据库系统</li><li>数据处理：高延迟，大规模</li></ol><p><strong>运行架构：</strong></p><ol><li>完成 HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成</li><li>生成的查询计划存储在HDFS中，并在随后有 MapReduce 调用执行</li></ol><p><strong>分区：</strong></p><ul><li>在Hive Select查询中一般会扫描整个表内容，会消耗很多时间做没必要的工作。有时候只需要扫描表中关心的一部分数据，因此建表时引入了partition概念</li></ul><p><strong>分桶</strong>：</p><ol><li>相对分区进行更细粒度的划分</li><li>是取样（sampling）更高效</li></ol><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>1.HQL语言，实验三(创建表格、查询、统计)</p><p>2.为什么会有hive</p><ul><li><p>基于类SQL实现大数据数分析（数据仓库）</p></li><li><p>数据库系统：用于解决事务处理，实现对数据的“增、删、改、查”</p><p>数据仓库：用于做查询分析，通常不会做单条数据的插入、修改与删除</p></li></ul><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p><strong>NoSQL：</strong> 泛指非关系型的数据库。</p><p><strong>应用场景：</strong></p><ul><li><p>数据模型比较简单；</p></li><li><p>对数据库性能要求较高；</p></li><li><p>不需要高度的数据一致性；</p></li><li><p>对于给定key，比较容易映射复杂值的环境</p></li></ul><p><strong>HBase–Hadoop Database：</strong>是一个高可靠性、高性能、面向列、可伸缩、实时读写的分布式数据库</p><ul><li>利用Hadoop HDFS作为其文件存储系统</li><li>利用Hadoop MapReduce来处理HBase中海量数据</li><li>利用Zookeeper作为其分布式协同服务</li><li>主要用来存储非结构化和半结构化的松散数据（列存NoSQL数据库），没有严格的结构</li><li>Key&#x2F;Value</li></ul><p><strong>HBase与HDFS</strong></p><ul><li>相同点<ul><li>二者都具有良好的容错性和扩展性，都可以扩展成百千上万个结点</li></ul></li><li>不同点<ul><li>HDFS适合批处理场景</li><li>HDFS不支持数据的随机查找、不适合增量数据处理、不支持数据更新</li></ul></li><li>关系<ul><li>HBase内存管理的所有文件都存储在HDFS之中</li></ul></li></ul><p><strong>HBase数据模型</strong></p><ul><li><p>Column Family列族&amp; qualifier列</p><ul><li><p>HBase表中的每个列都归属于某个列族，列族必须作为表模式(schema)定义的一部分预先给出。</p><p><u>create ‘test’, ‘course’</u></p></li></ul></li><li><p>列名以列族作为前缀，每个“列族”都可以有多个列成员</p><ul><li>course: math, course: English</li><li>新的列族成员（列）可以随后按需、动态加入</li></ul></li><li><p>权限控制、存储以及调优都是在列族层面进行的；</p></li><li><p>HBase把<strong>同一列族里面的数据存储在同一目录下</strong>，由几个文件保存。</p></li></ul><p><strong>Timestamp时间戳</strong></p><ul><li>在HBase每个cell存储单元对同一份数据有多个版本</li></ul><p><strong>Region</strong></p><ul><li>HBase自动把表水平划分成多个区域(region)，每个region会保存一个表里面某段连续的数据；每个表一开始只有一个region，随着数据不断插入表，region不断增大，当增大到一个阀值的时候，region就会等分会两个新的region（裂变）；</li><li>当表中的行不断增多，就会有越来越多的region。这样一张完整的表被保存在多个Region server上。</li></ul><p><strong>Memstore与StoreFile</strong></p><ul><li>一个Region由多个Store组成，一个Store对应一个CF（列族）</li><li>Store包括位于内存中的MemStore和位于磁盘的StoreFile</li><li>执行原理<ul><li>先写入MemStore</li><li>后写入StoreFile</li><li>写满后由HMaster分配到RegionServer服务器</li><li>客户端检索数据，先在MemStore找，找不到再找StoreFile</li></ul></li></ul><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><ol><li><p>nosql数据库</p></li><li><p>有什么例子?</p></li><li><p><strong>列族</strong>，列（实验四)。列再添加数据的时候可以动态的添加</p></li></ol><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p><strong>Zookeeper：</strong>主要服务于分布式系统</p><ul><li><p>问题</p><ul><li>使用分布式系统就无法避免对节点管理的问题；</li><li>需要实时感知节点的状态、对节点进行统一管理等等；</li></ul></li><li><p>作用</p><ul><li>同一配置管理</li><li>同一命名服务</li><li>分布式锁</li><li>集群管理</li></ul></li></ul><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p><strong>Spark:</strong></p><ol><li><u>基于内存计算的大数据并行计算框架</u>，可用于构建大型的、低延迟的数据分析应用程序<ul><li>Spark将数据载入内存后，之后的迭代计算都可以直接使用内存中的中间结果作运算，避免了从磁盘中频繁读取数据</li></ul></li><li><u>Spark基于DAG的任务调度执行机制</u>，要优于Hadoop MapReduce的迭代执行机制</li><li>Spark的计算模式也属于MapReduce，但不局限于Map和Reduce操作，还提供了多种数据集操作类型，<u>编程模型比Hadoop MapReduce更灵活</u></li></ol><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><ol><li><p>与mapreduce有什么不同</p></li><li><p>为什么比map reduce快</p></li><li><p>DAG有向无环图(为什么?)</p><p><strong>DAG：</strong>是Directed Acyclic Graph（有向无环图）的简称，反映RDD之间的依赖关系</p></li><li><p>spark机制，先不计算,到时候要结果了才计算</p></li><li><p>RDD数据集。架构，运行流程(理解)</p><p><strong>RDD：</strong>是Resilient Distributed Dataset（弹性分布式数据集）的简称，是分布式内存的一个抽象概念，提供了一种高度受限的共享内存模型</p><p><strong>架构，运行流程：</strong></p><ul><li><p>一个Application由一个Driver和若干个Job构成，一个Job由多个Stage构成，一个Stage由多个没有Shuffle关系的Task组成</p></li><li><p>当执行一个Application时，Driver会向集群管理器申请资源，启动Executor，并向Executor发送应用程序代码和文件，然后在Executor上执行Task，运行结束后，执行结果会返回给Driver，或者写到HDFS或者其他数据库中</p></li></ul></li></ol><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><ul><li><p>干什么的，应用场景</p><p><strong>实时流计算</strong></p><p>应用场景：</p><ul><li>Twitter流式处理大数据分析</li><li>网路流量实时分析</li><li>GPS实时路况分析</li></ul></li><li><p>解决了什么问题</p><p>问题：</p><ol><li>进行实时数据库里，需要维护大量信息、队列和消费者，业务逻辑部分相对只占小部分（接受以及信息序列上发文字大量时间）</li><li>应用程序运行在worker上，worker需要单独部署，系统脆弱，不是容错。（还需要部署消息队列）</li></ol><p>方案（Storm特点）：</p><ul><li><strong>编程简单</strong>：开发人员<strong>只需要关注应用逻辑</strong>，而且跟Hadoop类似，Storm提供的编程原语也很简单</li></ul><ul><li><p>高性能，低延迟：可以应用于广告搜索引擎这种要求对广告主的操作进行实时响应的场景。</p></li><li><p>分布式：可以轻松应对数据量大，单机搞不定的场景</p></li><li><p>可扩展： 随着业务发展，数据量和计算量越来越大，系统可水平扩展</p></li><li><p>容错：单个节点挂了不影响应用</p></li><li><p>消息不丢失：保证消息处理</p></li></ul></li></ul><ol start="3"><li><p>做实时计算基本流程是怎么样的</p><p><img src="C:\Users\luilui\AppData\Roaming\Typora\typora-user-images\image-20211220201021271.png" alt="image-20211220201021271"></p></li><li><p>拓扑（Topology）</p><p>拓扑是一个有向图，其顶点是计算，边是数据流，包括了整个实时处理程序的逻辑。</p></li><li><p>数据流（Stream）</p><p>无限元组序列</p></li><li><p>概念</p><ul><li>•Tuple（元组：Storm提供的一个轻量级的数据结构）</li><li>•Spout（喷嘴：数据流的来源，负责接受数据源的数据进行分发）</li><li>Bolt（处理节点：负责接受数据进行计算，传向下个bolt或进行存储）</li><li>•Task（任务）</li><li>•Component（组件）</li><li>•Stream groupings（流分组）</li></ul></li><li><p>Storm架构</p><img src="C:\Users\luilui\AppData\Roaming\Typora\typora-user-images\image-20211220201130186.png" alt="image-20211220201130186" style="zoom:67%;" /><img src="C:\Users\luilui\AppData\Roaming\Typora\typora-user-images\image-20211220201149558.png" alt="image-20211220201149558" style="zoom:67%;" /></li></ol>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
